(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{487:function(e,t,s){"use strict";s.r(t);var n=s(30),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"eslint-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eslint-简介"}},[e._v("#")]),e._v(" ESLint 简介")]),e._v(" "),s("p",[s("a",{attrs:{href:"http://eslint.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESLint"),s("OutboundLink")],1),e._v(" 是一个开源的 JavaScript 代码检查工具，由 Nicholas C. Zakas 于2013年6月创建。代码检查是一种静态的分析，常用于寻找有问题的模式或者代码，并且不依赖于具体的编码风格。对大多数编程语言来说都会有代码检查，一般来说编译程序会内置检查工具。")]),e._v(" "),s("p",[e._v("JavaScript 是一个动态的弱类型语言，在开发中比较容易出错。因为没有编译程序，为了寻找 JavaScript 代码错误通常需要在执行过程中不断调试。像 ESLint 这样的可以让程序员在编码的过程中发现问题而不是在执行的过程中。")]),e._v(" "),s("p",[e._v("ESLint 的初衷是为了让程序员可以创建自己的检测规则。ESLint 的所有规则都被设计成可插入的。ESLint 的默认规则与其他的插件并没有什么区别，规则本身和测试可以依赖于同样的模式。为了便于人们使用，ESLint 内置了一些规则，当然，你可以在使用过程中自定义规则。")]),e._v(" "),s("p",[e._v("ESLint 使用 Node.js 编写，这样既可以有一个快速的运行环境的同时也便于安装。\n")]),e._v(" "),s("h3",{attrs:{id:"第一个eslint的helloword配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一个eslint的helloword配置"}},[e._v("#")]),e._v(" 第一个ESLint的HelloWord配置")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/bymori/front_WEB/tree/master/ESLint",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESLint目录"),s("OutboundLink")],1),e._v("\n执行")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" init -y  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 跳过会话，直接通过默认值生成 package.json")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" -D eslint  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 安装 eslint")]),e._v("\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("npx eslint --init  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 紧接着你应该设置一个配置文件")]),e._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/bymori/image-PicX@main/blog/image.1e3vk5eox2u8.png",alt:"image"}}),e._v(" "),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/bymori/image-PicX@main/blog/image.2ree7ugaj700.png",alt:"image"}}),e._v("\n选择完成后 会在根目录生成 "),s("code",[e._v(".eslintrc.js")]),e._v(" 文件")]),e._v(" "),s("p",[e._v("之后，你可以在任何文件或目录上运行ESLint如下：")]),e._v(" "),s("p",[e._v("创建一个src目录")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sayHi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'hello eslint'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 这时 'sayHi' 已定义但从未使用.eslintno-unused-vars")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sayHi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 使用即可")]),e._v("\n")])])]),s("h3",{attrs:{id:"启动项目环境一直报console错误是咋回事"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动项目环境一直报console错误是咋回事"}},[e._v("#")]),e._v(" 启动项目环境一直报console错误是咋回事？")]),e._v(" "),s("p",[e._v("在编写代码时，我们经常会使用到"),s("code",[e._v("console.log")]),e._v("打印，但是在"),s("code",[e._v("eslint")]),e._v("中"),s("code",[e._v("console")]),e._v("使用可能会报错。\n报错的原因是因为我们采用的是"),s("code",[e._v('"extends": "eslint:recommended"')]),e._v("推荐检查规则。\n我们可以在规则中加上"),s("code",[e._v('"no-console": "off"')]),e._v("关闭掉"),s("code",[e._v("console")]),e._v("的检查就可以了\n上述"),s("code",[e._v("console")]),e._v("报错场景是发生在"),s("code",[e._v("eslint 5.15.1")]),e._v("版本下，当升级到"),s("code",[e._v("6.6.0")]),e._v("最新版本后不会由"),s("code",[e._v("console")]),e._v("报错现象。")]),e._v(" "),s("p",[e._v("目前 eslint版本为 "),s("code",[e._v('"eslint": "^8.1.0" #21.10.27')])]),e._v(" "),s("h3",{attrs:{id:"eslint的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eslint的配置"}},[e._v("#")]),e._v(" ESLint的配置")]),e._v(" "),s("p",[e._v("ESlint 被设计为完全可配置的，这意味着你可以关闭每一个规则而只运行基本语法验证，或混合和匹配 ESLint 默认绑定的规则和你的自定义规则，以让 ESLint 更适合你的项目。有两种主要的方式来配置 ESLint：")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("Configuration Comments")]),e._v(" - 使用 JavaScript 注释把配置信息直接嵌入到一个代码源文件中。")]),e._v(" "),s("li",[s("strong",[e._v("Configuration Files")]),e._v(" - 使用 JavaScript、JSON 或者 YAML 文件为整个目录（处理你的主目录）和它的子目录指定配置信息。可以配置一个独立的 "),s("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#configuration-file-formats",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v(".eslintrc.*")]),s("OutboundLink")],1),e._v(" 文件，或者直接在 "),s("a",{attrs:{href:"https://docs.npmjs.com/files/package.json",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("package.json")]),s("OutboundLink")],1),e._v(" 文件里的 "),s("code",[e._v("eslintConfig")]),e._v(" 字段指定配置，ESLint 会查找和自动读取它们，再者，你可以在"),s("a",{attrs:{href:"http://eslint.cn/docs/user-guide/command-line-interface",target:"_blank",rel:"noopener noreferrer"}},[e._v("命令行"),s("OutboundLink")],1),e._v("运行时指定一个任意的配置文件。")])]),e._v(" "),s("p",[e._v("如果你在你的主目录（通常 "),s("code",[e._v("~/")]),e._v("）有一个配置文件，ESLint 只有在无法找到其他配置文件时才使用它。")]),e._v(" "),s("p",[e._v("有很多信息可以配置：")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("Environments")]),e._v(" - 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。")]),e._v(" "),s("li",[s("strong",[e._v("Globals")]),e._v(" - 脚本在执行期间访问的额外的全局变量。")]),e._v(" "),s("li",[s("strong",[e._v("Rules")]),e._v(" - 启用的规则及其各自的错误级别。")])]),e._v(" "),s("p",[e._v("所有这些选项让你可以细粒度地控制 ESLint 如何对待你的代码。")]),e._v(" "),s("h3",{attrs:{id:"如何为项目中的不同文件夹配置不同的eslint规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何为项目中的不同文件夹配置不同的eslint规则"}},[e._v("#")]),e._v(" 如何为项目中的不同文件夹配置不同的ESLint规则")]),e._v(" "),s("p",[e._v("当使用 "),s("code",[e._v(".eslintrc.*")]),e._v(" 和 "),s("code",[e._v("package.json")]),e._v("文件的配置时，你可以利用层叠配置。例如，假如你有以下结构：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("your-project\n├── .eslintrc\n├── lib\n│ └── source.js\n└─┬ tests\n  ├── .eslintrc\n  └── test.js\n")])])]),s("p",[e._v("层叠配置使用离要检测的文件最近的 "),s("code",[e._v(".eslintrc")]),e._v("文件作为最高优先级，然后才是父目录里的配置文件，等等。当你在这个项目中允许 ESLint 时，"),s("code",[e._v("lib/")]),e._v(" 下面的所有文件将使用项目根目录里的 "),s("code",[e._v(".eslintrc")]),e._v(" 文件作为它的配置文件。当 ESLint 遍历到 "),s("code",[e._v("test/")]),e._v(" 目录，"),s("code",[e._v("your-project/.eslintrc")]),e._v(" 之外，它还会用到 "),s("code",[e._v("your-project/tests/.eslintrc")]),e._v("。所以 "),s("code",[e._v("your-project/tests/test.js")]),e._v(" 是基于它的目录层次结构中的两个"),s("code",[e._v(".eslintrc")]),e._v(" 文件的组合，并且离的最近的一个优先。通过这种方式，你可以有项目级 ESLint 设置，也有覆盖特定目录的 ESLint 设置。")]),e._v(" "),s("p",[e._v("同样的，如果在根目录的 "),s("code",[e._v("package.json")]),e._v(" 文件中有一个 "),s("code",[e._v("eslintConfig")]),e._v(" 字段，其中的配置将使用于所有子目录，但是当 "),s("code",[e._v("tests")]),e._v(" 目录下的 "),s("code",[e._v(".eslintrc")]),e._v(" 文件中的规则与之发生冲突时，就会覆盖它。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("your-project\n├── package.json\n├── lib\n│ └── source.js\n└─┬ tests\n  ├── .eslintrc\n  └── test.js\n")])])]),s("p",[e._v("如果同一目录下 "),s("code",[e._v(".eslintrc")]),e._v(" 和 "),s("code",[e._v("package.json")]),e._v(" 同时存在，"),s("code",[e._v(".eslintrc")]),e._v(" 优先级高会被使用，"),s("code",[e._v("package.json")]),e._v(" 文件将不会被使用。")]),e._v(" "),s("p",[e._v("**注意：**如果在你的主目录下有一个自定义的配置文件 ("),s("code",[e._v("~/.eslintrc")]),e._v(") ，如果没有其它配置文件时它才会被使用。因为个人配置将适用于用户目录下的所有目录和文件，包括第三方的代码，当 ESLint 运行时可能会导致问题。")]),e._v(" "),s("h3",{attrs:{id:"五种在文件中配置eslint的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五种在文件中配置eslint的方式"}},[e._v("#")]),e._v(" 五种在文件中配置ESLint的方式")]),e._v(" "),s("ol",[s("li",[e._v("根目录配置 "),s("code",[e._v(".eslintrc.js")])]),e._v(" "),s("li",[e._v("YAML - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。\\")]),e._v(" "),s("li",[e._v("JSON - 使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSON 文件允许 JavaScript 风格的注释。")]),e._v(" "),s("li",[e._v("package.json - 在 package.json 里创建一个 eslintConfig属性，在那里定义你的配置。")]),e._v(" "),s("li",[e._v("注释语法")])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint eqeqeq: "off", curly: "error" */')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint quotes: ["error", "double"], curly: 2 */')]),e._v("\n")])])]),s("p",[e._v("如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：")]),e._v(" "),s("ol",[s("li",[s("code",[e._v(".eslintrc.js")])]),e._v(" "),s("li",[s("code",[e._v(".eslintrc.yaml")])]),e._v(" "),s("li",[s("code",[e._v(".eslintrc.yml")])]),e._v(" "),s("li",[s("code",[e._v(".eslintrc.json")])]),e._v(" "),s("li",[s("code",[e._v(".eslintrc")])]),e._v(" "),s("li",[s("code",[e._v("package.json")])])]),e._v(" "),s("h3",{attrs:{id:"eslint中的env"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eslint中的env"}},[e._v("#")]),e._v(" ESLint中的env")]),e._v(" "),s("p",[s("strong",[e._v("Specifying Environments")]),e._v(" :")]),e._v(" "),s("p",[e._v("一个环境定义了一组预定义的全局变量。可用的环境包括：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("browser")]),e._v(" - 浏览器环境中的全局变量。")]),e._v(" "),s("li",[s("code",[e._v("node")]),e._v(" - Node.js 全局变量和 Node.js 作用域。")]),e._v(" "),s("li",[s("code",[e._v("commonjs")]),e._v(" - CommonJS 全局变量和 CommonJS 作用域 (用于 Browserify/WebPack 打包的只在浏览器中运行的代码)。")]),e._v(" "),s("li",[s("code",[e._v("shared-node-browser")]),e._v(" - Node.js 和 Browser 通用全局变量。")]),e._v(" "),s("li",[s("code",[e._v("es6")]),e._v(" - 启用除了 modules 以外的所有 ECMAScript 6 特性（该选项会自动设置 "),s("code",[e._v("ecmaVersion")]),e._v(" 解析器选项为 6）。")]),e._v(" "),s("li",[s("code",[e._v("worker")]),e._v(" - Web Workers 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("amd")]),e._v(" - 将 "),s("code",[e._v("require()")]),e._v(" 和 "),s("code",[e._v("define()")]),e._v(" 定义为像 "),s("a",{attrs:{href:"https://github.com/amdjs/amdjs-api/wiki/AMD",target:"_blank",rel:"noopener noreferrer"}},[e._v("amd"),s("OutboundLink")],1),e._v(" 一样的全局变量。")]),e._v(" "),s("li",[s("code",[e._v("mocha")]),e._v(" - 添加所有的 Mocha 测试全局变量。")]),e._v(" "),s("li",[s("code",[e._v("jasmine")]),e._v(" - 添加所有的 Jasmine 版本 1.3 和 2.0 的测试全局变量。")]),e._v(" "),s("li",[s("code",[e._v("jest")]),e._v(" - Jest 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("phantomjs")]),e._v(" - PhantomJS 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("protractor")]),e._v(" - Protractor 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("qunit")]),e._v(" - QUnit 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("jquery")]),e._v(" - jQuery 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("prototypejs")]),e._v(" - Prototype.js 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("shelljs")]),e._v(" - ShellJS 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("meteor")]),e._v(" - Meteor 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("mongo")]),e._v(" - MongoDB 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("applescript")]),e._v(" - AppleScript 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("nashorn")]),e._v(" - Java 8 Nashorn 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("serviceworker")]),e._v(" - Service Worker 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("atomtest")]),e._v(" - Atom 测试全局变量。")]),e._v(" "),s("li",[s("code",[e._v("embertest")]),e._v(" - Ember 测试全局变量。")]),e._v(" "),s("li",[s("code",[e._v("webextensions")]),e._v(" - WebExtensions 全局变量。")]),e._v(" "),s("li",[s("code",[e._v("greasemonkey")]),e._v(" - GreaseMonkey 全局变量。")])]),e._v(" "),s("p",[e._v("这些环境并不是互斥的，所以你可以同时定义多个。")]),e._v(" "),s("p",[e._v("可以在源文件里、在配置文件中或使用 "),s("a",{attrs:{href:"http://eslint.cn/docs/user-guide/command-line-interface",target:"_blank",rel:"noopener noreferrer"}},[e._v("命令行"),s("OutboundLink")],1),e._v(" 的 "),s("code",[e._v("--env")]),e._v(" 选项来指定环境。")]),e._v(" "),s("p",[e._v("要在你的 JavaScript 文件中使用注释来指定环境，格式如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/* eslint-env node, mocha */\n")])])]),s("p",[e._v("该设置启用了 Node.js 和 Mocha 环境。")]),e._v(" "),s("p",[e._v("要在配置文件里指定环境，使用 "),s("code",[e._v("env")]),e._v(" 关键字指定你想启用的环境，并设置它们为 "),s("code",[e._v("true")]),e._v("。例如，以下示例启用了 browser 和 Node.js 的环境：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "env": {\n    "browser": true,\n    "node": true\n  }\n}\n')])])]),s("p",[e._v("或在 "),s("code",[e._v("package.json")]),e._v(" 文件中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "mypackage",\n  "version": "0.0.1",\n  "eslintConfig": {\n    "env": {\n      "browser": true,\n      "node": true\n    }\n  }\n}\n')])])]),s("p",[e._v("在 YAML 文件中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("---\n  env:\n    browser: true\n    node: true\n")])])]),s("p",[e._v("如果你想在一个特定的插件中使用一种环境，确保提前在 "),s("code",[e._v("plugins")]),e._v(" 数组里指定了插件名，然后在 env 配置中不带前缀的插件名后跟一个 "),s("code",[e._v("/")]),e._v(" ，紧随着环境名。例如：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "plugins": ["example"],\n  "env": {\n    "example/custom": true\n  }\n}\n')])])]),s("p",[e._v("或在 "),s("code",[e._v("package.json")]),e._v(" 文件中")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "mypackage",\n  "version": "0.0.1",\n  "eslintConfig": {\n    "plugins": ["example"],\n    "env": {\n      "example/custom": true\n    }\n  }\n}\n')])])]),s("p",[e._v("在 YAML 文件中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("---\n  plugins:\n    - example\n  env:\n    example/custom: true\n")])])]),s("h3",{attrs:{id:"eslint中的specifying-globals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eslint中的specifying-globals"}},[e._v("#")]),e._v(" ESLint中的Specifying Globals")]),e._v(" "),s("p",[e._v("当访问当前源文件内未定义的变量时，"),s("a",{attrs:{href:"http://eslint.cn/docs/rules/no-undef",target:"_blank",rel:"noopener noreferrer"}},[e._v("no-undef"),s("OutboundLink")],1),e._v(" 规则将发出警告。如果你想在一个源文件里使用全局变量，推荐你在 ESLint 中定义这些全局变量，这样 ESLint 就不会发出警告了。你可以使用注释或在配置文件中定义全局变量。")]),e._v(" "),s("p",[e._v("要在你的 JavaScript 文件中，用注释指定全局变量，格式如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/* global var1, var2 */\n")])])]),s("p",[e._v("这定义了两个全局变量，"),s("code",[e._v("var1")]),e._v(" 和 "),s("code",[e._v("var2")]),e._v("。如果你想选择性地指定这些全局变量可以被写入(而不是只被读取)，那么你可以用一个 "),s("code",[e._v('"writable"')]),e._v(" 的标志来设置它们:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/* global var1:writable, var2:writable */\n")])])]),s("p",[e._v("要在配置文件中配置全局变量，请将 "),s("code",[e._v("globals")]),e._v(" 配置属性设置为一个对象，该对象包含以你希望使用的每个全局变量。对于每个全局变量键，将对应的值设置为 "),s("code",[e._v('"writable"')]),e._v(" 以允许重写变量，或 "),s("code",[e._v('"readonly"')]),e._v(" 不允许重写变量。例如：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n    "globals": {\n        "var1": "writable",\n        "var2": "readonly"\n    }\n}\n')])])]),s("p",[e._v("在 YAML 中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("---\n  globals:\n    var1: writable\n    var2: readonly\n")])])]),s("p",[e._v("在这些例子中 "),s("code",[e._v("var1")]),e._v(" 允许被重写，"),s("code",[e._v("var2")]),e._v(" 不允许被重写。")]),e._v(" "),s("p",[e._v("可以使用字符串 "),s("code",[e._v('"off"')]),e._v(" 禁用全局变量。例如，在大多数 ES2015 全局变量可用但 "),s("code",[e._v("Promise")]),e._v(" 不可用的环境中，你可以使用以下配置:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n    "env": {\n        "es6": true\n    },\n    "globals": {\n        "Promise": "off"\n    }\n}\n')])])]),s("p",[e._v("由于历史原因，布尔值 "),s("code",[e._v("false")]),e._v(" 和字符串值 "),s("code",[e._v('"readable"')]),e._v(" 等价于 "),s("code",[e._v('"readonly"')]),e._v("。类似地，布尔值 "),s("code",[e._v("true")]),e._v(" 和字符串值 "),s("code",[e._v('"writeable"')]),e._v(" 等价于 "),s("code",[e._v('"writable"')]),e._v("。但是，不建议使用旧值。")]),e._v(" "),s("p",[e._v("**注意：**要启用"),s("a",{attrs:{href:"http://eslint.cn/docs/rules/no-global-assign",target:"_blank",rel:"noopener noreferrer"}},[e._v("no-global-assign"),s("OutboundLink")],1),e._v("规则来禁止对只读的全局变量进行修改。")]),e._v(" "),s("h3",{attrs:{id:"eslint中的rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eslint中的rules"}},[e._v("#")]),e._v(" ESLint中的Rules")]),e._v(" "),s("p",[s("a",{attrs:{href:"http://eslint.cn/docs/rules/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESLint Rules"),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"如何extends继承规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何extends继承规则"}},[e._v("#")]),e._v(" 如何extends继承规则")]),e._v(" "),s("p",[e._v("一个配置文件可以被基础配置中的已启用的规则继承。")]),e._v(" "),s("p",[s("code",[e._v("extends")]),e._v(" 属性值可以是：")]),e._v(" "),s("ul",[s("li",[e._v("指定配置的字符串(配置文件的路径、可共享配置的名称、"),s("code",[e._v("eslint:recommended")]),e._v(" 或 "),s("code",[e._v("eslint:all")]),e._v(")")]),e._v(" "),s("li",[e._v("字符串数组：每个配置继承它前面的配置")])]),e._v(" "),s("p",[e._v("ESLint递归地扩展配置，因此基本配置也可以具有 "),s("code",[e._v("extends")]),e._v(" 属性。"),s("code",[e._v("extends")]),e._v(" 属性中的相对路径和可共享配置名从配置文件中出现的位置解析。")]),e._v(" "),s("p",[s("code",[e._v("rules")]),e._v(" 属性可以做下面的任何事情以扩展（或覆盖）规则：")]),e._v(" "),s("ul",[s("li",[e._v("启用额外的规则")]),e._v(" "),s("li",[e._v("改变继承的规则级别而不改变它的选项：\n"),s("ul",[s("li",[e._v("基础配置："),s("code",[e._v('"eqeqeq": ["error", "allow-null"]')])]),e._v(" "),s("li",[e._v("派生的配置："),s("code",[e._v('"eqeqeq": "warn"')])]),e._v(" "),s("li",[e._v("最后生成的配置："),s("code",[e._v('"eqeqeq": ["warn", "allow-null"]')])])])]),e._v(" "),s("li",[e._v("覆盖基础配置中的规则的选项\n"),s("ul",[s("li",[e._v("基础配置："),s("code",[e._v('"quotes": ["error", "single", "avoid-escape"]')])]),e._v(" "),s("li",[e._v("派生的配置："),s("code",[e._v('"quotes": ["error", "single"]')])]),e._v(" "),s("li",[e._v("最后生成的配置："),s("code",[e._v('"quotes": ["error", "single"]')])])])])]),e._v(" "),s("h3",{attrs:{id:"using-eslint-recommended"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-eslint-recommended"}},[e._v("#")]),e._v(" Using "),s("code",[e._v('"eslint:recommended"')])]),e._v(" "),s("p",[e._v("值为 "),s("code",[e._v('"eslint:recommended"')]),e._v(" 的 "),s("code",[e._v("extends")]),e._v(" 属性启用一系列核心规则，这些规则报告一些常见问题，在 "),s("a",{attrs:{href:"http://eslint.cn/docs/rules/",target:"_blank",rel:"noopener noreferrer"}},[e._v("规则页面"),s("OutboundLink")],1),e._v(" 中被标记为 。这个推荐的子集只能在 ESLint 主要版本进行更新。")]),e._v(" "),s("p",[e._v("如果你的配置集成了推荐的规则：在你升级到 ESLint 新的主版本之后，在你使用"),s("a",{attrs:{href:"http://eslint.cn/docs/user-guide/command-line-interface#fix",target:"_blank",rel:"noopener noreferrer"}},[e._v("命令行"),s("OutboundLink")],1),e._v("的 "),s("code",[e._v("--fix")]),e._v(" 选项之前，检查一下报告的问题，这样你就知道一个新的可修复的推荐的规则将更改代码。")]),e._v(" "),s("p",[s("code",[e._v("eslint --init")]),e._v(" 命令可以创建一个配置，这样你就可以继承推荐的规则。")]),e._v(" "),s("p",[e._v("JavaScript 格式的一个配置文件的例子：")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"extends"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"eslint:recommended"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"rules"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// enable additional rules")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"indent"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"linebreak-style"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unix"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"quotes"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"double"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"semi"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"always"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// override default options for rules from base configurations")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"comma-dangle"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"always"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"no-cond-assign"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"always"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// disable rules from base configurations")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"no-console"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"off"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("h3",{attrs:{id:"配置plugin插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置plugin插件"}},[e._v("#")]),e._v(" 配置plugin插件")]),e._v(" "),s("p",[e._v("ESLint 支持使用第三方插件。在使用插件之前，你必须使用 npm 安装它。")]),e._v(" "),s("p",[e._v("在配置文件里配置插件时，可以使用 "),s("code",[e._v("plugins")]),e._v(" 关键字来存放插件名字的列表。插件名称可以省略 "),s("code",[e._v("eslint-plugin-")]),e._v(" 前缀。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n    "plugins": [\n        "plugin1",\n        "eslint-plugin-plugin2"\n    ]\n}\n')])])]),s("p",[e._v("在 YAML 中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("---\n  plugins:\n    - plugin1\n    - eslint-plugin-plugin2\n")])])]),s("p",[e._v("**注意：**插件是相对于 ESLint 进程的当前工作目录解析的。换句话说，ESLint 将加载与用户通过从项目 Node 交互解释器运行 "),s("code",[e._v("('eslint-plugin-pluginname')")]),e._v(" 获得的相同的插件。")]),e._v(" "),s("h3",{attrs:{id:"如何用glob模式指定要检测的文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何用glob模式指定要检测的文件"}},[e._v("#")]),e._v(" 如何用glob模式指定要检测的文件")]),e._v(" "),s("p",[s("strong",[e._v("v4.1.0+.")]),e._v(" 有时，你可能需要更精细的配置，比如，如果同一个目录下的文件需要有不同的配置。因此，你可以在配置中使用 "),s("code",[e._v("overrides")]),e._v(" 键，它只适用于匹配特定的 glob 模式的文件，使用你在命令行上传递的格式 (e.g., "),s("code",[e._v("app/**/*.test.js")]),e._v(")。")]),e._v(" "),s("h3",{attrs:{id:"how-it-works"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works"}},[e._v("#")]),e._v(" How it works")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("Glob 模式覆盖只能在配置文件 ("),s("code",[e._v(".eslintrc.*")]),e._v(" 或 "),s("code",[e._v("package.json")]),e._v(") 中进行配置。")])]),e._v(" "),s("li",[s("p",[e._v("模式应用于相对于配置文件的目录的文件路径。 比如，如果你的配置文件的路径为 "),s("code",[e._v("/Users/john/workspace/any-project/.eslintrc.js")]),e._v(" 而你要检测的路径为 "),s("code",[e._v("/Users/john/workspace/any-project/lib/util.js")]),e._v("，那么你在 "),s("code",[e._v(".eslintrc.js")]),e._v(" 中提供的模式是相对于 "),s("code",[e._v("lib/util.js")]),e._v(" 来执行的.")])]),e._v(" "),s("li",[s("p",[e._v("在相同的配置文件中，Glob 模式覆盖比其他常规配置具有更高的优先级。 同一个配置中的多个覆盖将按顺序被应用。也就是说，配置文件中的最后一个覆盖会有最高优先级。")])]),e._v(" "),s("li",[s("p",[e._v("一个 glob 特定的配置几乎与 ESLint 的其他配置相同。覆盖块可以包含常规配置中的除了"),s("code",[e._v("root")]),e._v("之外的其他任何有效配置选项，")]),e._v(" "),s("ul",[s("li",[e._v("一个 glob 特定的配置可以有 "),s("code",[e._v("extends")]),e._v(" 设置，但是会忽略扩展配置中的 "),s("code",[e._v("root")]),e._v(" 属性。")]),e._v(" "),s("li",[e._v("只有当父配置和子配置的 glob 模式匹配时，才会应用嵌套的 "),s("code",[e._v("overrides")]),e._v(" 设置。当扩展配置具有 "),s("code",[e._v("overrides")]),e._v(" 设置时也是如此。")])])]),e._v(" "),s("li",[s("p",[e._v("可以在单个覆盖块中提供多个 glob 模式。一个文件必须匹配至少一个配置中提供的模式。")])]),e._v(" "),s("li",[s("p",[e._v("覆盖块也可以指定从匹配中排除的模式。如果一个文件匹配了任何一个排除模式，该配置将不再被应用。")])])]),e._v(" "),s("h3",{attrs:{id:"relative-glob-patterns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#relative-glob-patterns"}},[e._v("#")]),e._v(" Relative glob patterns")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("project-root\n├── app\n│   ├── lib\n│   │   ├── foo.js\n│   │   ├── fooSpec.js\n│   ├── components\n│   │   ├── bar.js\n│   │   ├── barSpec.js\n│   ├── .eslintrc.json\n├── server\n│   ├── server.js\n│   ├── serverSpec.js\n├── .eslintrc.json\n")])])]),s("p",[e._v("在 "),s("code",[e._v("app/.eslintrc.json")]),e._v(" 文件中的配置定义了 "),s("code",[e._v("**/*Spec.js")]),e._v(" glob 模式。该模式相对于 "),s("code",[e._v("app/.eslintrc.json")]),e._v(" 的基准目录。因此，该模式匹配 "),s("code",[e._v("app/lib/fooSpec.js")]),e._v(" 和 "),s("code",[e._v("app/components/barSpec.js")]),e._v("，但 "),s("strong",[e._v("不匹配")]),e._v(" "),s("code",[e._v("server/serverSpec.js")]),e._v("。如果你在项目根目录的 "),s("code",[e._v(".eslintrc.json")]),e._v(" 文件中定义相同的模式，它将匹配所有三个 "),s("code",[e._v("*Spec")]),e._v(" 文件。")]),e._v(" "),s("p",[s("strong",[e._v("双引号限制为单引号")])]),e._v(" "),s("p",[e._v("在你的 "),s("code",[e._v(".eslintrc.json")]),e._v(" 文件中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "rules": {\n    "quotes": ["error", "double"]\n  },\n\n  "overrides": [\n    {\n      "files": ["bin/*.js", "lib/*.js"],\n      "excludedFiles": "*.test.js", // 排除\n      "rules": {\n        "quotes": ["error", "single"]\n      }\n    }\n  ]\n}\n')])])]),s("h3",{attrs:{id:"提交代码前自动校验eslint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交代码前自动校验eslint"}},[e._v("#")]),e._v(" 提交代码前自动校验ESLint")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v("husky")]),e._v(" 提交检测代码")])])}),[],!1,null,null,null);t.default=a.exports}}]);